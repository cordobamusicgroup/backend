generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InitializationStatus {
  id          Int     @id @default(autoincrement())
  initialized Boolean @default(false)
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  email     String   @unique
  password  String

  fullName String @default("Change Me")

  preferences UserPreferences[]
  comms       UserComms[]

  role     Role    @default(USER)
  clientId Int?
  client   Client? @relation(fields: [clientId], references: [id])

  @@map("users")
}

model UserPreferences {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  fontSize          String?
  mainMenuCollapsed Boolean?
  theme             String?
  language          String?

  @@map("users_preferences")
}

model UserComms {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  type  CommsChannels
  value String

  @@map("users_comms")
}

model Client {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  type      ClientType
  addressId Int
  address   Address    @relation(fields: [addressId], references: [id])
  vatId     String
  taxId     String

  balances Balance[]

  labels    Label[]
  users     User[]
  contracts Contract[]

  @@map("clients")
}

model Contract {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId Int?    @unique
  client   Client? @relation(fields: [clientId], references: [id])

  contractId   Int            @unique
  contractType ContractType   @default(DISTRIBUTION_EXCLUSIVE)
  ppd          Float?         @default(75.00)
  status       ContractStatus @default(PENDING)

  startDate DateTime
  endDate   DateTime
  signed    Boolean   @default(false)
  signedAt  DateTime?
  signedBy  String?

  @@map("agreements")
}

model Balance {
  id       Int      @id @default(autoincrement())
  clientId Int
  client   Client   @relation(fields: [clientId], references: [id])
  currency Currency @default(EUR)
  amount   Float    @default(0.00)

  @@map("clients_balances")
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  street    String
  city      String
  state     String
  countryId Int
  zip       String
  country   Country  @relation(fields: [countryId], references: [id])
  client    Client[]

  @@map("clients_addresses")
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String
  shortCode String    @unique
  code      String    @unique
  address   Address[]
  label     Label[]

  @@map("countries")
}

model Label {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  labelStatus LabelStatus @default(ACTIVE)

  clientId Int
  client   Client @relation(fields: [clientId], references: [id])

  name      String   @unique
  website   String?
  countryId Int?
  country   Country? @relation(fields: [countryId], references: [id])

  beatportStatus   LabelRegistrationStatus @default(NO_REGISTRATION)
  traxsourceStatus LabelRegistrationStatus @default(NO_REGISTRATION)
  beatportUrl      String?
  traxsourceUrl    String?

  KontorRoyaltyReport  KontorRoyaltyReport[]
  BelieveRoyaltyReport BelieveRoyaltyReport[]

  @@map("labels")
}

//*** Royalties Reports ***//

model KontorRoyaltyReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  currency  Currency @default(EUR)

  labelId Int?
  label   Label? @relation(fields: [labelId], references: [id])

  labelName     String
  productType   String
  grid          String
  ean           String
  articleNumber String
  isrc          String
  artist        String
  title         String
  workTitle     String
  store         String
  channelType   String
  channelId     String
  country       String
  salesPeriod   String
  royalties     String
  units         String

  clientRate String?
  netRenueve String?

  @@map("kontor_royalties_reports")
}

model BelieveRoyaltyReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  currency  Currency @default(USD)

  labelId Int?
  label   Label? @relation(fields: [labelId], references: [id])

  reportingMonth            String
  salesMonth                String
  platform                  String
  countryRegion             String
  labelName                 String
  artistName                String
  releaseTitle              String
  trackTitle                String
  upc                       String
  isrc                      String
  catalogNb                 String
  streamingSubscriptionType String
  releaseType               String
  salesType                 String
  quantity                  String
  clientPaymentCurrency     String
  unitPrice                 Float
  mechanicalFee             Float
  grossRevenue              Float
  clientShareRate           Float
  netRevenue                Float

  @@map("believe_reports")
}

model UnlinkedReport {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  labelName            String
  count                Int
  UnlinkedReportDetail UnlinkedReportDetail[]

  @@map("unlinked_reports")
}

model UnlinkedReportDetail {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  unlinkedReportId Int
  unlinkedReport   UnlinkedReport @relation(fields: [unlinkedReportId], references: [id])
  data             Json

  @@map("unlinked_details_reports")
}

//*** FreeAgent API ***//

model FreeAgentToken {
  id           Int      @id @default(autoincrement())
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())

  @@map("freeagent_tokens")
}

//*** Enums  ***//

enum Currency {
  USD
  EUR
  GBP

  @@map("currencies")
}

enum Distributor {
  BELIEVE
  KONTOR

  @@map("distributors")
}

enum ClientType {
  INDIVIDUAL
  COMPANY

  @@map("clients_types")
}

enum Role {
  ADMIN
  ADMIN_CONTENT
  ADMIN_LEGAL
  ADMIN_MANAGER
  USER

  @@map("roles")
}

enum LabelRegistrationStatus {
  NO_REGISTRATION
  PENDING
  ACTIVE

  @@map("label_registrations_statuses")
}

enum LabelStatus {
  ACTIVE
  DISABLED

  @@map("label_statuses")
}

enum CommsChannels {
  MOBILE
  PHONE
  SKYPE
  X_TWITTER
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITCH
  VK

  @@map("communication_channels")
}

enum ContractStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PENDING

  @@map("contracts_statuses")
}

enum ContractType {
  DISTRIBUTION_NONEXCLUSIVE
  DISTRIBUTION_EXCLUSIVE
  LICENSING
  PUBLISHING
  MANAGEMENT
  PRODUCTION
  PROMOTION
  OTHER

  @@map("contracts_types")
}
