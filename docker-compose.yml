name: 'cmg-api-${DOCKER_ENV}'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - 'DOCKER_BUILDKIT=1'
    image: ${DOCKER_IMAGE}:${DOCKER_VERSION} # Usa variable de imagen y versión
    container_name: cmg-api-${DOCKER_ENV}
    env_file:
      - .env.${DOCKER_ENV}
    environment:
      - APP_DATABASE_URL: 'postgresql://${DB_POSTGRES_USER}:${DB_POSTGRES_PASSWORD}@${DB_POSTGRES_HOST}:${DB_POSTGRES_PORT}/${DB_POSTGRES_DB}?schema=public'
    ports:
      - '${DOCKER_APP_PORT}:6060'
    volumes:
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    container_name: cmg-db-${DOCKER_ENV}
    image: 'postgres:latest'
    env_file:
      - .env.${DOCKER_ENV}
    volumes:
      - ./data/db/${DOCKER_ENV}_data:/var/lib/postgresql/data # Volumen específico para el entorno
      - ./data/db/${DOCKER_ENV}_log:/var/log/postgresql
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U $${DB_POSTGRES_USER} -d $${DB_POSTGRES_DB}',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - '${DOCKER_DB_PORT}:5432'

  redis:
    container_name: cmg-redis-${DOCKER_ENV}
    image: 'redis:latest'
    ports:
      - '${DOCKER_REDIS_PORT}:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    external: true
    name: nginx_webnet
