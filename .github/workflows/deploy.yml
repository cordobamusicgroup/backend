name: Deploy to Server

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH keys and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)" > /dev/null 2>&1
          ssh-add ~/.ssh/id_rsa > /dev/null 2>&1
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: Set deployment environment variables
        run: |
          if [ -z "${{ vars.DEPLOY_PATH }}" ] || [ -z "${{ vars.ENV }}" ]; then
            echo "Error: Environment variables DEPLOY_PATH or ENV are not set."; exit 1
          fi
        env:
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          ENV: ${{ vars.ENV }}

      - name: Debug Environment Variables
        run: |
          echo "DEPLOY_PATH is: $DEPLOY_PATH"
          echo "ENV is: $ENV"
        env:
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          ENV: ${{ vars.ENV }}

      - name: Deploy and start containers on server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          ENV: ${{ vars.ENV }}
        run: |
          echo "Using DEPLOY_PATH: $DEPLOY_PATH"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" -o StrictHostKeyChecking=no "$SSH_USERNAME@$SSH_HOST" << 'EOF'
            DEPLOY_PATH="${DEPLOY_PATH}"
            ENV="${ENV}"

            echo "Logged into server: $(hostname)"
            echo "Current directory before cd: $(pwd)"

            cd "$DEPLOY_PATH" || { echo "Failed to change to DEPLOY_PATH"; exit 1; }
            echo "Changed to directory: $(pwd)"

            if [ -d ".git" ]; then
              echo "Git repository detected."
              echo "Resetting all local changes..."
              git reset --hard HEAD
              git remote -v
              git status

              git fetch origin "$ENV" && git pull origin "$ENV"
            else
              echo "Error: Not a git repository or missing .git folder."
              exit 1
            fi

            chmod +x start_containers.sh &&
            ./start_containers.sh "$ENV"
          EOF
