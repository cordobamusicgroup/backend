name: Deploy to Server

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest # Use Github Runners
    environment:
      ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    # ConfiguraciÃ³n de concurrencia
    concurrency:
      group: deploy-${{ github.ref_name }} # Agrupar por rama (main o staging)
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH keys and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)" > /dev/null 2>&1
          ssh-add ~/.ssh/id_rsa > /dev/null 2>&1
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

      - name: Set deployment environment variables
        run: |
          if [ -z "${{ vars.DEPLOY_PATH }}" ] || [ -z "${{ vars.ENV }}" ]; then
            echo "Error: Environment variables DEPLOY_PATH or ENV are not set."; exit 1
          fi
        env:
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          ENV: ${{ vars.ENV }}

      - name: Debug Environment Variables
        run: |
          echo "DEPLOY_PATH is: $DEPLOY_PATH"
          echo "ENV is: $ENV"
        env:
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          ENV: ${{ vars.ENV }}

      - name: Deploy and start containers on server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH }}
          ENV: ${{ vars.ENV }}
        run: |
          echo "Using DEPLOY_PATH: $DEPLOY_PATH"  # Verificar el valor localmente
          ssh -i /home/runner/.ssh/id_rsa -p $SSH_PORT -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST '

            # Definir DEPLOY_PATH y asegurar que solo se use "production" con la rama "main"
            DEPLOY_PATH="'${{ vars.DEPLOY_PATH }}'"
            BRANCH="'${{ github.ref_name }}'"
            ENV=$([ "$BRANCH" == "main" ] && echo "production" || echo "$BRANCH")

            # Mostrar el nombre del servidor y la carpeta actual
            echo "Logged into server: $(hostname)"
            echo "Current directory before cd: $(pwd)"  # Mostrar el directorio actual

            # Verificar el valor de DEPLOY_PATH
            echo "DEPLOY_PATH is: $DEPLOY_PATH"

            # Intentar cambiar al directorio de despliegue
            cd $DEPLOY_PATH || { echo "Failed to change to DEPLOY_PATH"; exit 1; }

            # Verificar si el cambio de directorio fue exitoso
            echo "Changed to directory: $(pwd)"  # Mostrar la ruta del directorio de despliegue

            if [ -d ".git" ]; then
              echo "Git repository detected."
              
              # Resetear todos los cambios locales en archivos rastreados
              echo "Resetting all local changes..."
              git reset --hard HEAD  # Restablecer todos los cambios locales en archivos rastreados

              git remote -v  # Verificar el repositorio remoto
              git status  # Verificar el estado del repositorio local

              # Realizar el fetch y pull de la rama correspondiente
              git fetch origin $BRANCH
              git pull origin $BRANCH
            else
              echo "Error: Not a git repository or missing .git folder."
              exit 1
            fi

            # Ejecutar el script de inicio de contenedores
            chmod +x start_containers.sh &&
            ./start_containers.sh $ENV
          '
